//Get payload parameters
var pl = null;
var requestBody = request.body;
if (!requestBody) {
	pl = request.parameters.payload;
	pl = JSON.parse(pl);
} else {
	pl = requestBody.payload;
}

//START TABLE DECISION CODE
function execute(pl) {

var decision = [];

//PRESCRIPT START
var _ = require("modules/underscore/underscore.js")._;

function detectIntruder(grideyeSensorData, upperlimit){
  var data = JSON.parse(grideyeSensorData);
  
  return _.every(data, function(num) { return num > upperlimit; });
}
//PRESCRIPT END

//RULES EVALUATION START
if(typeof pl != "object") {
  return[];
} else { 
	  if((pl != null && pl["co2"] != undefined && pl["co2"] >400) && (pl != null && pl["tvoc"] != undefined && pl["tvoc"] >190) && isAny("acc_z") && isAny("grideye") && isAny("humidity") && isAny("temperature") && isAny("noise")){
       decision.push({ "email": "FIRE_ALARM","record": "FIRE_ALARM" });
	} 
	  if(isAny("co2") && isAny("tvoc") && (pl != null && pl["acc_z"] != undefined && pl["acc_z"] <0.2) && isAny("grideye") && isAny("humidity") && isAny("temperature") && isAny("noise")){
       decision.push({ "email": "SYSTEM_BROKEN_ALARM","record": "SYSTEM_BROKEN_ALARM" });
	} 
	  if(isAny("co2") && isAny("tvoc") && isAny("acc_z") && (pl != null && pl["grideye"] != undefined && detectIntruder(pl["grideye"],110)) && isAny("humidity") && isAny("temperature") && isAny("noise")){
       decision.push({ "email": "INTRUDER_DETECTED_ALARM","record": "INTRUDER_DETECTED_ALARM" });
	} 
	  if(isAny("co2") && isAny("tvoc") && isAny("acc_z") && isAny("grideye") && (pl != null && pl["humidity"] != undefined && pl["humidity"] >60) && (pl != null && pl["temperature"] != undefined && pl["temperature"] >30) && isAny("noise")){
       decision.push({ "email": "COIL_MAINTENANCE_ALARAM","record": "COIL_MAINTENANCE_ALARAM" });
	} 
	  if(isAny("co2") && isAny("tvoc") && isAny("acc_z") && isAny("grideye") && isAny("humidity") && isAny("temperature") && (pl != null && pl["noise"] != undefined && pl["noise"] >2000)){
       decision.push({ "email": "NOISE_ALARM","record": "NOISE_ALARM" });
	} 
}
//RULES EVALUATION END

//POSTSCRIPT START
//Variable "decision" is the object returned by the decision table execution.
//Variable "decision" format is [{"action1": "value1", "action2":  "value2"}].
return decision;
//POSTSCRIPT END

}
//Check if value is "in" or is "not in" array
//return true or false
function evalArrayOperation(value, operator,  array) {
	if(operator == "in") {
		return (array.indexOf(value)>-1);
	} else {
		return (array.indexOf(value) == -1) ;
	} 
}

//isAny function, when condition expression is not important
function isAny(param) {
	return true;
}

//START_REST_CALL 
return execute(pl);
//END_REST_CALL